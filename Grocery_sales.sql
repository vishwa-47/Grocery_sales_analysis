---creating the tables for the files and creating the necessary connections between the tables for futher analysis

create table Category(
	category_id int,
	category_name varchar(45)
)

alter table category add primary key (category_id)

	
create table cities(
	city_id int,
	city_name varchar(45),
	zipcode decimal(5,0),
	country_id int
)
alter table cities add foreign key (country_id) references countries(country_id)
alter table cities add primary key (city_id)
alter table employees add foreign key(city_id) references cities(city_id)


create table countries(
	country_id int,
	country_name varchar(45),
	country_code varchar(5)
)

alter table countries add primary key (country_id)



create table customers(
	customer_id int,
	first_name varchar(45),
	middle_initial varchar(5),
	last_name varchar(45),
	city_id int,
	address varchar(90)
)
alter table customers add primary key (customer_id)

alter table customers add foreign key (city_id) references cities(city_id)
create table employees(
	employee_id int,
	first_name varchar(5),
	middle_initial varchar(5),
	last_name varchar(45),
	birth_date date,
	gender varchar(10),
	city_id int,
	hire_date date
)

alter table employees alter column first_name type varchar(45)

alter table employees add primary key (employee_id)


create table products(
	product_id int,
	product_name varchar(45),
	price decimal(4,0),
	category_id int,
	class varchar(45),
	modify_date date,
	resistent varchar(15),
	isallergic varchar(15),
	vitality_days decimal(3,0)
)
alter table products add column class varchar(45)
alter table products add primary key (product_id)
alter table products add foreign key (category_id) references category (category_id) 



create table sales(
	sales_id int,
	sales_person_id int,
	customer_id int,
	product_id int,
	quantity int,
	discount decimal(10,2),
	total_price decimal(10,2),
	Sales_date date,
	Transaction_number varchar(45)
)


alter table sales add primary key (sales_id)

alter table sales add foreign key (sales_person_id) references employees(employee_id)
alter table sales add foreign key (customer_id) references customers(customer_id)
alter table sales add foreign key (product_id) references products(product_id)



select * from sales


---Data exploration and removing null adn duplicate values from data

--category table
	
select * from category

-- cities table 96 values 

select distinct(country_id) from cities --all values are distinct in this table

select distinct(zipcode) from cities

-- countries table - 206

select * from countries
	
select distinct(country_id) from countries -- 206

select distinct(country_name) from countries --206 values

select distinct(country_code) from countries --206 values


-- customers table  - 98759


select * from customers

select distinct(customer_id)from customers -- 98759

select * from customers where customer_id is null or first_name is null or  middle_initial is null or last_name is null or 
	city_id is null or address is null

-- employees table  - 23


select * from employees
	
select distinct(employee_id) from employees --23
select (first_name,'', last_name) as name from employees -- 23


select * from employees where employee_id is null or first_name is null or middle_initial is null or last_name is null or
	birth_date is null or gender is null or city_id is null or hire_date is null

	
-- products table  - 452


select * from products

select distinct(product_name) from products -- 452

select * from products where vitality_days is null



--- Sales table


select * from sales

select * from sales where sales_id is null or sales_person_id is null or customer_id is null or product_id  is null or
	quantity is null or discount is null or total_price is null or sales_date is null or transaction_number is null

-- --found null values in sales date, over 65000+ rows were null and tried to find if I could find  some information on that column since could not find any
-- information about the column had to delete those rows from the records

delete from sales where sales_date is null

select distinct(sales_id) from sales





--basic level questions

--1.What is the total revenue generated?


select sum((s.quantity*p.price)*(1-s.discount)) as total_revenue
	from sales as s
	inner join products as p
	on p.product_id = s.product_id

	-
-- total revenue generated by the company is $ 4290523689.30



--2. Which product categories contribute the most to revenue


select c.category_name, sum((s.quantity*p.price)*(1-s.discount)) as total_revenue
	from category as c
	inner join  
	products as p
	on c.category_id = p.category_id
	inner join 
	sales as s
	on s.product_id = p.product_id
	group by c.category_name
	order by 2 desc

	
	-- Confections		551281561.70
	-- Meat			488544721.90
	-- Poultry			435888410.40
	-- Cereals			422615505.70
	-- Snails			368837259.40


	
-- 3.What are the top 10 best-selling products by quantity


select product_name,
	sum(s.quantity) as total_qty_sold
	from products as p
	left join sales as s 
	on p.product_id = s.product_id
	group by 1
	order by 2

-- Muffin - Zero Transfat		187817
-- Oranges - Navel, 72			188272
-- Bacardi Breezer - Tropical	188446
-- Nut - Pistachio, Shelled	188651
-- Beef - Inside Round			188671
-- Cocktail Napkin Blue		188694
-- Liners - Baking Cups		188908
-- Pants Custom Dry Clean		188963
-- Snapple - Iced Tea Peach	188968
-- Coffee - Hazelnut Cream		189036
	
--4. How many unique customers made purchases?


select count(distinct customer_id) as total_customers from sales


--98759

---5. What is the average transaction value?



with Average_trans as(
	
select transaction_number,
	sum((s.quantity*p.price)*(1-s.discount)) as Total_transaction_value  
	from sales as s
	left join products as p
	on p.product_id = s.product_id
	group by 1
)
	
select
	round(avg(Total_transaction_value),2) as average_transaction_value
from Average_trans


---641.28

--6.What is the total discount given?


select sum(s.quantity*s.discount*p.price) as Total_dicount_offered
	from sales as s
	left join products as p
	on p.product_id = s.product_id
	

---132508142.70

--7. Which store location has the highest sales?

select c.city_name,
	sum((s.quantity*p.price)*(1-s.discount)) as Total_sales  
	from cities as c
	inner  join employees as e
	on c.city_id = e.city_id
	inner join sales as s
	on e.employee_id = s.sales_person_id 
	inner join products as p
	on p.product_id = s.product_id
	group by city_name
order by 2 desc
	limit 1


----Lubbock		560340047.70

------------------ intermediate level questions ---------------------------




--8. What is the monthly revenue trend over time?



select Date_TRUNC('month',s.sales_date) AS month,
	sum((s.quantity*p.price)*(1-s.discount)) as  total_sales
	from sales as s
	left join products as p
	on s.product_id = p.product_id
	group by 1
	order by 2 asc


-- 2018-05-01 00:00:00+05:30			299921223.50
-- 2018-02-01 00:00:00+05:30			929482724.40
-- 2018-04-01 00:00:00+05:30			997567132.30
-- 2018-01-01 00:00:00+05:30			1031040274.60
-- 2018-03-01 00:00:00+05:30			1032512334.50
	
--9. What is the Month-over-Month (MoM) revenue growth?


with MOM as(
select date_trunc('Month', sales_date) as month,
		sum((s.quantity * p.price)*(1-s.discount)) as current_month
	from sales as s
	left join products as p
	on s.product_id = p.product_id
	group by 1
),

mom_growth as(
	select month,
	lag(current_month) over(order by month) as previous_month,
	current_month from MOM
)


select month,
	current_month,
	previous_month,
	round((current_month-previous_month)/nullif(previous_month,0)*100,2) as Mom_growth_percentage
from mom_growth



-- 2018-05-01 00:00:00+05:30			0
-- 2018-02-01 00:00:00+05:30			-9.85
-- 2018-04-01 00:00:00+05:30			11.08
-- 2018-01-01 00:00:00+05:30			1031040274.60
-- 2018-03-01 00:00:00+05:30			-3.38
--10. What is the average number of items per transaction?


select
	round(avg(total_quantity),2) as average_number_of_items
from(
	select transaction_number,
	sum(quantity) as total_quantity
	from sales
	group by 1
)



--11. What are the top-selling products per store location?


With P_ranking as(
select 	rank() over(partition by c.city_name order by sum(quantity) desc) as ranking,
	city_name,
	product_name,
	sum(quantity) as total_units_sold
	from products as p
	inner join sales as s 
	on p.product_id = s.product_id
	inner join employees as e
	on s.sales_person_id = e.employee_id
	inner join cities as c
	on c.city_id = e.city_id
	group by city_name,product_name
)

select * from P_ranking where ranking = 1




--12. What is the revenue and quantity sold by day of the week?



select trim(to_char(sales_date,'Day')) as Day,
	sum((s.quantity * p.price)* (1-s.discount)) as total_sales,
	sum(quantity) total_quantity
	from sales as s 
	left join products as p
	on s.product_id = p.product_id
	group by 1

-- Friday			599500622.60		12162078
-- Monday 			631852982.20		12806199
-- Saturday		598679164.60		12140124
-- Sunday			599025498.90		12137522
-- Thursday		598131548.20		12137247
-- Tuesday			631260873.10		12806944
-- Tuesday			632072999.70		12813433


	
--13. What is the average basket size per customer?


select customer_id,
	round((total_quantity*1.0/total_customers),2) as average_basket_size
	from(
select customer_id, 
	sum(quantity) as total_quantity,
	count(DISTINCT customer_id ) as total_customers 
from sales
group by 1

)
order by 2 desc


---2424,2n customer 2400 and 3rd customer 2400


--14.Which customer segments (e.g., high spenders vs. low spenders) are most profitable?



with customer_segmentation_T as(
select customer_id,
	sum((s.quantity* p.price)*(1-s.discount)) as total_sales,
	case
	when sum((s.quantity* p.price)*(1-s.discount)) > 0 and 
	sum((s.quantity* p.price)*(1-s.discount)) < 1000 then 'Very Low Spenders'
	when sum((s.quantity* p.price)*(1-s.discount)) > 1000 and 
	sum((s.quantity* p.price)*(1-s.discount)) < 30000 then 'Low spenders'
	when sum((s.quantity* p.price)*(1-s.discount) )> 30000 and 
	sum((s.quantity* p.price)*(1-s.discount)) < 95000 then 'Medium spenders'
	else 'High spenders'
	end as Customer_segmentation
from sales as s
inner join products as p
on s.product_id = p.product_id
	group by 1
)

select customer_segmentation,
	sum(total_sales)
from customer_segmentation_T
group by 1


-- Low spenders			543370936.00
-- Medium spenders			3613699977.10
-- High spenders			133452776.20

---15. What is the Customer Lifetime Value (CLV) based on historical transactions?



select c.customer_id,concat(first_name,' ', last_name) as Name,
	sum((s.quantity*p.price)*(1-s.discount)) as CLV
	from customers as c
	left join sales as s on
	s.customer_id = c.customer_id
	inner join products as p
	on p.product_id = s.product_id
	group by 1,2
	order by 3 desc





--highest is Wayne chan for 126760.80 and lowest is paul bauer for 1944.90







